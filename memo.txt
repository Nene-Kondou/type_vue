mustache
3.1.5 テンプレートに表示させる変数を定義するref()
    ref関数は事前にVue.js本体からインポートする必要がある...import {ref} from "vue";
    refの引数として渡して、その戻り値を変数nameに代入している。①②どちらも同じ
    ①const name = ref("hoge")
    ②const yourname = "田中太郎"
      const name = ref(yourname);

3.2.1 ref()の働き
    リアクティブシステム...変数の値の変化に連動して表示内容が自動で変化すること
    ref()を使用した変数の値を直接代入するのはダメ const A = ref(hofe); A = B(×)
    値を変更するにはref()によって生成された変数のvalueプロパティの値を変更する必要がある
    const 変数名 = ref(値)
    変数名.value = 新しい値

3|3 リアクティブデータ用意のバリエーション
3.3.1 計算結果をリアクティブにする computed()
    import {ref,computed} from "vue";
    computed()関数の引数には、計算結果をリターンするアロー関数を記述する。
    算出プロパティは読み取り専用 computed()関数ないで area.value = 300; などはエラーとなる。
    const 変数名 = computed(
        (): 計算結果のデータ型 => {
            計算処理;
            return 計算結果;
        }
    )

3.3.2 オブジェクトをまとめてリアクティブにする reactive()
    リアクティブなテンプレート変数を用意するのに、ref()を用いていたが、reactiveでまとめられる
    テンプレート変数をオブジェクトにまとめ、そのオブジェクトをまるまるreactive()関数に渡し、その戻り値を変数dataに代入している・

4|1 データバインディングのディレクティブ
4.1.1 ディレクティブとは、テンプレートブロックでHTMLタグ内に記述するv-で始まる属性のこと
    v-bind:データバインディング
    v-on:イベント処理
    v-model:双方向データバインディング
    v-html:HTML文字列表示
    v-pre:静的コンテンツ表示
    v-once:データバインディングを初回のみに制限
    v-clock:マスタッシュ構文の非表示
    v-if:条件分岐
    v-show:表示/非表示の制御
    v-for:ループ処理

    v-bind:△△="⚪⚪" △=属性 ⚪=テンプレート変数をオブジェクトにまとめ、そのオブジェクトをまるまるreactive
    v-bindの値には式が記述できる v-bind:href="url + 'guide/index.html'"