mustache
3.1.5 テンプレートに表示させる変数を定義するref()
    ref関数は事前にVue.js本体からインポートする必要がある...import {ref} from "vue";
    refの引数として渡して、その戻り値を変数nameに代入している。①②どちらも同じ
    ①const name = ref("hoge")
    ②const yourname = "田中太郎"
      const name = ref(yourname);

3.2.1 ref()の働き
    リアクティブシステム...変数の値の変化に連動して表示内容が自動で変化すること
    ref()を使用した変数の値を直接代入するのはダメ const A = ref(hofe); A = B(×)
    値を変更するにはref()によって生成された変数のvalueプロパティの値を変更する必要がある
    const 変数名 = ref(値)
    変数名.value = 新しい値

3|3 リアクティブデータ用意のバリエーション
3.3.1 計算結果をリアクティブにする computed()
    import {ref,computed} from "vue";
    computed()関数の引数には、計算結果をリターンするアロー関数を記述する。
    算出プロパティは読み取り専用 computed()関数ないで area.value = 300; などはエラーとなる。
    const 変数名 = computed(
        (): 計算結果のデータ型 => {
            計算処理;
            return 計算結果;
        }
    )

3.3.2 オブジェクトをまとめてリアクティブにする reactive()
    リアクティブなテンプレート変数を用意するのに、ref()を用いていたが、reactiveでまとめられる
    テンプレート変数をオブジェクトにまとめ、そのオブジェクトをまるまるreactive()関数に渡し、その戻り値を変数dataに代入している・

4|1 データバインディングのディレクティブ
4.1.1 ディレクティブとは、テンプレートブロックでHTMLタグ内に記述するv-で始まる属性のこと
    v-bind:データバインディング
    v-on:イベント処理
    v-model:双方向データバインディング
    v-html:HTML文字列表示
    v-pre:静的コンテンツ表示
    v-once:データバインディングを初回のみに制限
    v-clock:マスタッシュ構文の非表示
    v-if:条件分岐
    v-show:表示/非表示の制御
    v-for:ループ処理

    v-bind:△△="⚪⚪" △=属性 ⚪=テンプレート変数をオブジェクトにまとめ、そのオブジェクトをまるまるreactive
    v-bindの値には式が記述できる v-bind:href="url + 'guide/index.html'"

4.1.4 バインドする属性をテンプレート変数として指定
    引数もテンプレート変数で指定する方法を、動的引数(Dynamic Arguments)という
    v-bind:[変数]="値"

4.1.5 複数の属性にまとめてバインドする方法
    引数を指定しないでv-bindを使うと、複数の属性をまとめてバインドできる。
    引数指定しないと、配列がそのままバインドされる
    <script setup lang="ts">
        import {ref} from "vue";

        const imgAttributes = ref({
        src: "/src/assets/logo.svg",
        alt: "Vueのロゴ",
        width: 75,
        height: 75,
        });
    </script>

    <template>
        <p><img v-bind="imgAttributes"></p> ... <img src="/src/assets/logo.svg" alt="Vueのロゴ" width="75" height="75">
        <p><img v-bind="imgAttributes" title="ロゴです"></p> ... <img src="/src/assets/logo.svg" alt="Vueのロゴ" width="75" height="75" title="ロゴです">
        <p><img v-bind="imgAttributes" alt="ロゴです"></p> ... <img src="/src/assets/logo.svg" alt="ロゴです" width="75" height="75">
    </template>

4.1.6 v-bind:style属性へのバインディング
    設定値として記述できるもの...
        ▫️テンプレート変数　<p v-bind:style="{color: msgTextRed}">{{ msg }}</p>
        ▫️リテラル <p v-bind:style="{color: 'pink'}">{{ msg }}</p>
        ▫️算出プロパティ <p v-bind:style="{fontSize: textSize}">{{ msg }}</p>
            const textSize = computed(
                (): string => {
                    const size = Math.round(Math.random() * 25) + 10;
                    return `${size}pt`;
                }
            )
    v-bind:styleの値を複数指定する方法
        v-bind:style="{スタイルプロパティ: "値", ...}"
        <p v-bind:style="{color: msgTextColor,backgroundColor: msgbgtColor}">{{ msg }}</p>

4.1.7 class属性へのバインディング v-class
    -------- いったんとばす ---------

4.2.1 イベントりすなを設定するディレクティブ　v-on
    v-on:イベント名="イベント発生時に実行するメソッド名"
    メソッド定義の方法
        const メソッド名 = (): void => {
            処理内容
        };
    数値の文字列への変換
        TypeScriptではデータ型を厳密に扱う。
        randは乱数なので数値型。randValueの元となるref()に渡した値は文字列なので、randValue.valueも文字列。
        文字列型変数に数値は代入できないため、えらーが発生。これを避けるためString(rand)として数値を文字列に変換する。
        randValue.value = String(rand);　→　(エラー)randValue.value = rand;
4.2.5 イベントオブジェクトとそのほかの引数を併用するイベントハンドラメソッド
    イベントオブジェクトを引数として自動的に渡すのは、引数を省略してメソッド名のみ記述した場合。
    例）<p v-on:click="onPClickWithEvent">
    ほかの引数と組み合わせる場合は、引数部分でイベントオブジェクトとして$eventを明記する必要がある。
    <p v-on:click="onPClickWithEvent('green', $event)" v-bind:style="{backgroundColor: pBgColorEvent}">

8 | 3
8.3.1 親からデータをもらうProps
    Props ... 親コンポーネントから子コンポーネントへの通信、親コンポーネントからのデータを子コンポーネントで受け取る仕組み
    Propsの定義
        ①ここのPropsをメンバとするインターフェースを定義
            親コンポーネントから受け取りたいデータ(各Props)はPropsインターフェースのメンバとして定義
            interface Props { ... インターフェース名(任意)
            title: string,
            content: string
            }
        ②defineProps()関数を実行
            ①で定義したインターフェースをPropsとして利用するためにはdefineProps()関数を実行する。
            defineProps<Props>();